# Generated by Django 4.2.4 on 2023-09-03 11:43

import car.utils
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('description', models.TextField(blank=True)),
                ('brand', models.CharField(choices=[('Audi', 'Audi'), ('Chevrolet', 'Chevrolet'), ('Cadillac', 'Cadillac'), ('Acura', 'Acura'), ('BMW', 'BMW'), ('Chrysler', 'Chrysler'), ('Ford', 'Ford'), ('Buick', 'Buick'), ('INFINITI', 'INFINITI'), ('GMC', 'GMC'), ('Honda', 'Honda'), ('Hyundai', 'Hyundai'), ('Jeep', 'Jeep'), ('Genesis', 'Genesis'), ('Dodge', 'Dodge'), ('Jaguar', 'Jaguar'), ('Kia', 'Kia'), ('Land Rover', 'Land Rover'), ('Lexus', 'Lexus'), ('Mercedes-Benz', 'Mercedes-Benz'), ('Mitsubishi', 'Mitsubishi'), ('Lincoln', 'Lincoln'), ('MAZDA', 'MAZDA'), ('Nissan', 'Nissan'), ('MINI', 'MINI'), ('Porsche', 'Porsche'), ('Ram', 'Ram'), ('Subaru', 'Subaru'), ('Toyota', 'Toyota'), ('Volkswagen', 'Volkswagen'), ('Volvo', 'Volvo'), ('Alfa Romeo', 'Alfa Romeo'), ('FIAT', 'FIAT'), ('Freightliner', 'Freightliner'), ('Maserati', 'Maserati'), ('Tesla', 'Tesla'), ('Aston Martin', 'Aston Martin'), ('Bentley', 'Bentley'), ('Ferrari', 'Ferrari'), ('Lamborghini', 'Lamborghini'), ('Lotus', 'Lotus'), ('McLaren', 'McLaren'), ('Rolls-Royce', 'Rolls-Royce'), ('smart', 'smart'), ('Scion', 'Scion'), ('SRT', 'SRT'), ('Suzuki', 'Suzuki'), ('Fisker', 'Fisker'), ('Maybach', 'Maybach'), ('Mercury', 'Mercury'), ('Saab', 'Saab'), ('HUMMER', 'HUMMER'), ('Pontiac', 'Pontiac'), ('Saturn', 'Saturn'), ('Isuzu', 'Isuzu'), ('Panoz', 'Panoz'), ('Oldsmobile', 'Oldsmobile'), ('Daewoo', 'Daewoo'), ('Plymouth', 'Plymouth'), ('Eagle', 'Eagle'), ('Geo', 'Geo'), ('Daihatsu', 'Daihatsu'), ('Polestar', 'Polestar'), ('Rivian', 'Rivian'), ('Opel', 'Opel')], max_length=50)),
                ('model', models.CharField(max_length=50, verbose_name='model')),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('release_year', models.PositiveIntegerField()),
                ('engine_size', models.PositiveIntegerField(blank=True, null=True)),
                ('fuel_type', models.CharField(blank=True, choices=[('petrol', 'بنزين'), ('diesel', 'ديزل'), ('electric', 'كهرباء'), ('hybrid', 'هايبرد'), ('mild-hybrid', 'مايلد هايبرد'), ('plugin-hybrid', 'هايبرد - plugin')], max_length=20, null=True)),
                ('transmission_type', models.CharField(blank=True, choices=[('manual', 'Manual'), ('automatic', 'Automatic')], max_length=20, null=True)),
                ('weight', models.PositiveIntegerField(blank=True, null=True)),
                ('horse_power', models.PositiveIntegerField(blank=True, null=True)),
                ('speed', models.PositiveBigIntegerField(blank=True, null=True)),
                ('fuel_mileage', models.PositiveIntegerField(blank=True, null=True)),
                ('Odometer', models.PositiveIntegerField(blank=True, null=True)),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('condition', models.CharField(blank=True, choices=[('excelent', 'ممتازة'), ('good', 'جيد'), ('small-accident', 'حادث بسيط'), ('accident', 'تعرضت لحادث'), ('other', 'أخرى')], max_length=20, null=True)),
                ('custom', models.CharField(blank=True, choices=[('yes', 'مجمرك'), ('no', 'غير مجمرك')], max_length=20, null=True)),
                ('body_type', models.CharField(blank=True, choices=[('bus', 'Bus'), ('convertible', 'Convertible'), ('coupe', 'Coupe'), ('hatchback', 'Hatchback'), ('sedan', 'Sedan'), ('suv', 'SUV'), ('pick-up', 'PickUp'), ('truck', 'Truck')], max_length=20, null=True)),
                ('color', models.CharField(blank=True, choices=[('black', 'Black'), ('white', 'White'), ('red', 'Red'), ('green', 'Green'), ('blue', 'Blue'), ('yellow', 'Yellow'), ('orange', 'Orange'), ('purple', 'Purple'), ('pink', 'Pink'), ('brown', 'Brown'), ('gray', 'Gray'), ('lightgray', 'Lightgray'), ('darkgray', 'Darkgray'), ('cyan', 'Cyan'), ('magenta', 'Magenta'), ('gold', 'Gold')], max_length=10, null=True)),
                ('interior', models.TextField(blank=True, null=True)),
                ('exterior', models.TextField(blank=True, null=True)),
                ('performance', models.CharField(blank=True, max_length=50, null=True)),
                ('performance_description', models.TextField(blank=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('post_time', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='ExteriorImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exterior_image', models.ImageField(blank=True, null=True, upload_to=car.utils.car_image_exterior_path)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='InteriorImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interior_image', models.ImageField(blank=True, null=True, upload_to=car.utils.car_image_interior_path)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='NegativeAspect',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='PositiveAspect',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PriceHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('date', models.DateField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TechAndSafetyFeatures',
            fields=[
                ('feature', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('rating', models.PositiveIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('content', models.TextField(blank=True)),
                ('review_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('post', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='car.car')),
            ],
            options={
                'ordering': ['-review_date'],
            },
        ),
    ]
